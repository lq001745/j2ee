						java三大框架关系和MVC设计模式
一. Javaweb经典三层架构 是表述层（WEB层）、业务逻辑层（Business Logic），以及数据访问层（Data Access）。 
1.WEB层：包含JSP和Servlet等与WEB相关的内容； 
2.业务层：业务层中不包含JavaWeb API，它只关心业务逻辑； 
3.数据层：封装了对数据库的访问细节；Struts、Hibernate和Spring是我们Java开发中的常用关键，针对不同的应用场景给出最合适的解决方案，
   传统的Java Web应用程序是采用JSP+Servlet+Javabean来实现的，负责前台展示的JSP、负责流程逻辑控制的Servlet以及负责数据封装的Javabean，
但是，JSP页面中需要使用<%%>符号嵌入很多的Java代码，造成页面结构混乱，Servlet和Javabean负责了大量的跳转和运算工作，耦合紧密，程序复
用度低Struts框架，人们会把整个Web应用程序分为三层，Struts负责显示层，它调用业务层完成运算逻辑，业务层再调用持久层完成数据库的读写。
使用JDBC连接来读写数据库，就是打开数据库连接、使用复杂的SQL语句进行读写、关闭连接，获得的数据又需要转换或封装后往外传，很烦琐。
   出现了Hibernate框架，它需要你创建一系列的持久化类，每个类的属性都可以简单的看做和一张数据库表的属性一一对应，当然也可以实现关
系数据库的各种表件关联的对应。当我们需要相关操作是，不用再关注数据库表。我们不用再去一行行的查询数据库，只需要持久化类就可以完成
增删改查的功能。使我们的软件开发真正面向对象，而不是面向混乱的代码。使用Hibernate比JDBC方式减少了80%的编程量。
   Spring的作用就是完全解耦类之间的依赖关系，一个类如果要依赖什么，那就是一个接口。只要拿到一个实现了这个接口的类，就可以轻松的
通过xml配置文件把实现类注射到调用接口的那个类里。
所有类之间的这种依赖关系就完全通过配置文件的方式替代了。所以Spring框架最核心的就是所谓的依赖注射和控制反转。为了很好的处理事物，
Spring集成了Hibernate，使事物管理从Hibernate的持久层提升到了业务层，使用更加方便和强大。
 二.MVC的概念
   MVC是一种软件工程中的一种软件架构模式，把软件系统分为三个基本部分：模型（Model、视图（View）和控制器（Controller），即为MVC。
它是一种软件设计的典范.
2.MVC的详解
MVC并不是Java当中独有的，但是现在几乎所有的B/S的架构都采用了MVC框架模式，但是MVC在B/S架构中并没有完全地实现，其实我们根本不需要掌
握未实现的部分。 
・控制器Controller：控制器即是控制请求的处理逻辑，对请求进行处理，负责请 求转发； 
・视图View：视图即是用户看到并与之交互的界面，比如HTML（静态资源），JSP（动态资源）等等。 
・模型Model：模型代表着一种企业规范，就是业务流程/状态的处理以及业务规则的规定。业务流程的处理过程对其他层来说是不透明的，模型接受
视图数据的请求，并返回最终的处理结果。业务模型的设计可以说是MVC的核心。
3.MVC模式
  MVC模式被广泛用于Java的各种框架中，比如Struts2、spring MVC等等都用到了这种思想。Struts2是基于MVC的轻量级的web应用框架。基于MVC，
说明基于Struts2开发的Web应用自然就能实现MVC，也说明Struts2着力于在MVC的各个部分为我们的开发提供相应帮助。
